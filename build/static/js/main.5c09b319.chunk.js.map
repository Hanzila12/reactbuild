{"version":3,"sources":["Main.js","actions/api.js","actions/postMessage.js","components/useForm.js","components/PostMessageForm.js","components/PostMessages.js","reducers/postMessage.js","reducers/index.js","actions/store.js","App.js","serviceWorker.js","index.js"],"names":["props","AppBar","className","position","backgroundColor","Typography","variant","align","value","onClick","clickBtn","activeClass","to","spy","smooth","offset","duration","baseURL","url","fetchAll","axios","get","fetchById","id","create","newRecord","post","update","updatedRecord","put","delete","ACTION_TYPES","useForm","initialFieldValues","setCurrentId","useState","values","setValues","errors","setErrors","handleInputChange","e","target","name","resetForm","title","message","mapActionToProps","createPostMessage","data","onSuccess","dispatch","api","then","res","type","payload","catch","err","console","log","updatePostMessage","connect","state","postMessageList","postMessage","list","withStyles","theme","root","margin","spacing","form","display","flexWrap","justifyContent","postBtn","width","marginLeft","algntxt","classes","useEffect","currentId","find","x","_id","autoComplete","noValidate","onSubmit","preventDefault","ButterToast","raise","content","Crisp","scheme","Cinnamon","SCHEME_PURPLE","icon","AssignmentTurnedIn","temp","Object","every","validate","TextField","label","columns","onChange","error","helperText","fullWidth","multiline","rows","Button","color","size","fetchAllPostMessages","deletePostMessage","paper","top","padding","smMargin","actionDiv","textAlign","upperBtns1","upperBtns2","gridAlign","ntxt","Grid","container","item","xs","Paper","List","map","record","index","key","ListItem","ListItemText","window","confirm","DeleteSweep","Divider","component","intialState","reducers","combineReducers","action","filter","store","createStore","compose","applyMiddleware","thunk","App","styles","someClass","BackgroundColor","otherClass","background","renderView","setState","this","Main","Container","maxWidth","vertical","POS_TOP","horizontal","POS_RIGHT","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oVAOe,WAAAA,GAAK,OAEnB,oCAEC,kBAACC,EAAA,EAAD,CACCC,UAAU,SACVC,SAAS,SACTC,gBAAgB,OAChB,kBAACC,EAAA,EAAD,CACCH,UAAU,cACVI,QAAQ,KACRC,MAAM,QAHP,kBAQD,4BAAQL,UAAU,mBAAmBM,MAAO,EAAGC,QAAST,EAAMU,UAA9D,YAEY,IACV,kBAAC,OAAD,CACEC,YAAY,SACZC,GAAG,QACHC,KAAK,EACLC,QAAQ,EACRC,QAAS,GACTC,SAAU,KAEd,4BACCd,UAAU,mBACVM,MAAO,EACPC,QAAST,EAAMU,UAHhB,aAQU,O,yCCxCNO,EAAU,yBAED,aACgC,IAAlCC,EAAiC,uDAA3BD,EAAU,gBAC3B,MAAO,CACNE,SAAU,kBAAMC,IAAMC,IAAIH,IAC1BI,UAAW,SAAAC,GAAE,OAAIH,IAAMC,IAAIH,EAAMK,IACjCC,OAAQ,SAAAC,GAAS,OAAIL,IAAMM,KAAKR,EAAKO,IACrCE,OAAQ,SAACJ,EAAIK,GAAL,OAAuBR,IAAMS,IAAIX,EAAMK,EAAIK,IACnDE,OAAQ,SAAAP,GAAE,OAAIH,IAAMU,OAAOZ,EAAMK,MCTvBQ,EACH,SADGA,EAEH,SAFGA,EAGH,SAHGA,EAIA,Y,+FCyBEC,EA7BC,SAACC,EAAoBC,GAAkB,IAAD,EAEtBC,mBAASF,GAFa,mBAE3CG,EAF2C,KAEnCC,EAFmC,OAGtBF,mBAAS,IAHa,mBAG3CG,EAH2C,KAGnCC,EAHmC,KAmBlD,MAAO,CACHH,SACAC,YACAC,SACAC,YACAC,kBAnBsB,SAAAC,GAAM,IAAD,EACHA,EAAEC,OAAlBC,EADmB,EACnBA,KAAMnC,EADa,EACbA,MACd6B,EAAU,2BACHD,GADE,kBAEJO,EAAOnC,MAgBZoC,UAZc,WACdP,EAAUJ,GACVM,EAAU,IACVL,EAAa,M,0BCTfD,G,OAAqB,CACzBY,MAAO,GACPC,QAAS,KAmHLC,EAAmB,CACvBC,kBF1GoB,SAACC,EAAMC,GAAP,OAAqB,SAAAC,GACzCC,IAAkB5B,OAAOyB,GACtBI,MAAK,SAAAC,GACJH,EAAS,CACPI,KAAMxB,EACNyB,QAASF,EAAIL,OAEfC,OAEDO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QEkG5BG,kBF/FoB,SAACtC,EAAI0B,EAAMC,GAAX,OAAyB,SAAAC,GAC7CC,IAAkBzB,OAAOJ,EAAI0B,GAC1BI,MAAK,SAAAC,GACJH,EAAS,CACPI,KAAMxB,EACNyB,QAASF,EAAIL,OAEfC,OAEDO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,SE0FfI,eAVS,SAAAC,GAAK,MAAK,CAChCC,gBAAiBD,EAAME,YAAYC,QASGnB,EAAzBe,CAA2CK,aAtH3C,SAAAC,GAAK,MAAK,CACvBC,KAAM,CACJ,uBAAwB,CACtBC,OAAQF,EAAMG,QAAQ,KAG1BC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,UAElBC,QAAS,CACPC,MAAO,MACPC,WAAYV,EAAMG,QAAQ,KAE5BQ,QAAS,CACPD,WAAYV,EAAMG,QAAQ,QAsG4BJ,EAlGlC,SAAC,GAA2B,IAAzBa,EAAwB,EAAxBA,QAAYhF,EAAY,2BAEjDiF,qBAAU,WACe,GAAnBjF,EAAMkF,YACR7C,EAAU,eACLrC,EAAMgE,gBAAgBmB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOrF,EAAMkF,eAEpD3C,EAAU,OAEX,CAACvC,EAAMkF,YAEV,IAXiD,EA4B7ClD,EAAQC,EAAoBjC,EAAMkC,cANpCE,EAtB+C,EAsB/CA,OACAC,EAvB+C,EAuB/CA,UACAC,EAxB+C,EAwB/CA,OACAC,EAzB+C,EAyB/CA,UACAC,EA1B+C,EA0B/CA,kBACAI,EA3B+C,EA2B/CA,UAwBF,OACE,0BAAM0C,aAAa,MAAMC,YAAU,EAACrF,UAAS,UAAK8E,EAAQX,KAAb,KAAsBmB,SAtBhD,SAAA/C,GACnBA,EAAEgD,iBACF,IAAMvC,EAAY,WAChBwC,IAAYC,MAAM,CAChBC,QAAS,kBAAC,WAASC,MAAV,CAAgBhD,MAAM,WAC7B+C,QAAQ,yBACRE,OAAQC,WAASF,MAAMG,cACvBC,KAAM,kBAACC,EAAA,EAAD,UAGVtD,MA7Ba,WACf,IAAIuD,EAAI,eAAQ7D,GAMhB,OALA6D,EAAKtD,MAAQT,EAAOS,MAAQ,GAAK,0BACjCsD,EAAKrD,QAAUV,EAAOU,QAAU,GAAK,0BACrCP,EAAU,eACL4D,IAEEC,OAAOhE,OAAO+D,GAAME,OAAM,SAAAjB,GAAC,MAAS,IAALA,MAwBlCkB,KACqB,GAAnBtG,EAAMkF,UACRlF,EAAMgD,kBAAkBZ,EAAQc,GAEhClD,EAAM6D,kBAAkB7D,EAAMkF,UAAW9C,EAAQc,MAOnD,kBAACqD,EAAA,EAAD,eACErG,UAAW8E,EAAQD,QACnBpC,KAAK,QACLrC,QAAQ,WACRkG,MAAM,cACNC,QAAS,GACTjG,MAAO4B,EAAOS,MACd6D,SAAUlE,GACLF,EAAOO,OAAS,CAAE8D,OAAO,EAAMC,WAAYtE,EAAOO,SAEzD,kBAAC0D,EAAA,EAAD,eACErG,UAAW8E,EAAQR,KACnB7B,KAAK,UACLrC,QAAQ,WACRkG,MAAM,wBACNK,WAAS,EACTC,WAAS,EACTC,KAAM,EACNvG,MAAO4B,EAAOU,QACd4D,SAAUlE,GACLF,EAAOQ,SAAW,CAAE6D,OAAO,EAAMC,WAAYtE,EAAOQ,WAE3D,kBAACkE,EAAA,EAAD,CACE1G,QAAQ,YACR2G,MAAM,UACNC,KAAK,QACL3D,KAAK,SACLrD,UAAW8E,EAAQJ,SALrB,UAOA,kC,SCMA7B,G,OAAmB,CACvBoE,qBHlHsB,kBAAM,SAAAhE,GAC5BC,IAAkBjC,WACfkC,MAAK,SAAAC,GACJH,EAAS,CACPI,KAAMxB,EACNyB,QAASF,EAAIL,UAGhBQ,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QG2G5B0D,kBH9EoB,SAAC7F,EAAI2B,GAAL,OAAmB,SAAAC,GACvCC,IAAkBtB,OAAOP,GACtB8B,MAAK,SAAAC,GACJH,EAAS,CACPI,KAAMxB,EACNyB,QAASjC,IAEX2B,OAEDO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,UGwEfI,eATS,SAAAC,GAAK,MAAK,CAChCC,gBAAiBD,EAAME,YAAYC,QAQGnB,EAAzBe,CAA2CK,aArH3C,SAAAC,GAAK,MAAK,CACvBiD,MAAO,CACLC,IAAK,OACLhD,OAAQF,EAAMG,QAAQ,GACtBgD,QAASnD,EAAMG,QAAQ,IAEzBiD,SAAU,CACRlD,OAAQF,EAAMG,QAAQ,IAExBkD,UAAW,CACTC,UAAW,SACX5C,WAAYV,EAAMG,QAAQ,KAE5BoD,WAAY,CACV9C,MAAO,MACPC,WAAYV,EAAMG,SAAS,KAE7BqD,WAAY,CACV/C,MAAO,MACPC,WAAYV,EAAMG,SAAS,KAE7BsD,UAAW,CAET/C,WAAYV,EAAMG,QAAQ,KAE5BuD,KAAM,CAEJhD,WAAYV,EAAMG,QAAQ,OA0F4BJ,EAtFrC,SAAC,GAA2B,IAAzBa,EAAwB,EAAxBA,QAAYhF,EAAY,6BAEZmC,mBAAS,GAFG,mBAEvC+C,EAFuC,KAE5BhD,EAF4B,KAI9C+C,qBAAU,WACRjF,EAAMmH,yBACL,IAiBH,OACE,kBAACY,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIhI,UAAW8E,EAAQ6C,WACpC,kBAACM,EAAA,EAAD,CAAOjI,UAAW8E,EAAQqC,OACxB,wBAAInH,UAAW8E,EAAQ8C,MAAvB,YACA,kBAAC,EAAoB,CAAE5C,YAAWhD,mBAGtC,kBAAC6F,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIhI,UAAW8E,EAAQ6C,WACpC,kBAACM,EAAA,EAAD,CAAOjI,UAAW8E,EAAQqC,OACxB,kBAACe,EAAA,EAAD,KACE,wBAAIlI,UAAW8E,EAAQ8C,KAAMvG,GAAG,SAAhC,aAEEvB,EAAMgE,gBAAgBqE,KAAI,SAACC,EAAQC,GACjC,OACE,kBAAC,WAAD,CAAUC,IAAKD,GACb,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACrI,EAAA,EAAD,CAAYC,QAAQ,MACjBgI,EAAOzF,OAEV,6BACGyF,EAAOxF,SAEV,yBAAK5C,UAAW8E,EAAQyC,WACtB,kBAACT,EAAA,EAAD,CAAQ1G,QAAQ,OAAO2G,MAAM,UAAUC,KAAK,QAC1ChH,UAAW8E,EAAQwC,SACnB/G,QAAS,kBAAMyB,EAAaoG,EAAOjD,OACnC,qCAIF,kBAAC2B,EAAA,EAAD,CAAQ1G,QAAQ,OAAO2G,MAAM,UAAUC,KAAK,QAC1ChH,UAAW8E,EAAQwC,SACnB/G,QAAS,kBAjDlBc,EAiDiC+G,EAAOjD,SAvCnDsD,OAAOC,QAAQ,wCACjB5I,EAAMoH,kBAAkB7F,GAVR,WAChBmE,IAAYC,MAAM,CAChBC,QAAS,kBAAC,WAASC,MAAV,CAAgBhD,MAAM,WAC7B+C,QAAQ,uBACRE,OAAQC,WAASF,MAAMG,cACvBC,KAAM,kBAAC4C,EAAA,EAAD,cANG,IAAAtH,IAkDS,0CAOR,kBAACuH,EAAA,EAAD,CAASC,UAAU,mB,0BCxGjCC,EAAc,CAClB9E,KAAM,ICAK+E,EAAWC,YAAgB,CACvCjF,YDE0B,WAAkC,IAAjCF,EAAgC,uDAAxBiF,EAAaG,EAAW,uCAC1D,OAAQA,EAAO5F,MACb,KAAKxB,EACH,OAAO,2BACFgC,GADL,IAEEG,KAAK,YAAKiF,EAAO3F,WAGrB,KAAKzB,EACH,OAAO,2BACFgC,GADL,IAEEG,KAAK,GAAD,mBAAMH,EAAMG,MAAZ,CAAkBiF,EAAO3F,YAGjC,KAAKzB,EACH,OAAO,2BACFgC,GADL,IAEEG,KAAMH,EAAMG,KAAKmE,KAAI,SAAAjD,GAAC,OAAIA,EAAEC,KAAO8D,EAAO3F,QAAQ6B,IAAM8D,EAAO3F,QAAU4B,OAG7E,KAAKrD,EACH,OAAO,2BACFgC,GADL,IAEEG,KAAMH,EAAMG,KAAKkF,QAAO,SAAAhE,GAAC,OAAIA,EAAEC,KAAO8D,EAAO3F,aAIjD,QACE,OAAOO,ME9BAsF,EAAQC,YACpBL,EACAM,YACCC,YAAgBC,O,SCgCZC,G,4MACJC,OAAS,SAAAvF,GAAK,MAAK,CACjBwF,UAAW,CACTtF,OAAQF,EAAMG,QAAQ,GACtBgD,QAASnD,EAAMG,QAAQ,GACvBsF,gBAAiB,aAGnBC,WAAY,CACVC,WAAY,aAEdpC,WAAY,CACV9C,MAAO,MACPC,WAAYV,EAAMG,SAAS,KAE7BqD,WAAY,CACV/C,MAAO,MACPC,WAAYV,EAAMG,SAAS,KAE7BkD,UAAW,CACTC,UAAW,SACX5C,WAAYV,EAAMG,QAAQ,O,EAI9BR,MAAQ,CACNiG,WAAY,I,EAGdtJ,SAAW,SAAA+B,GACT,EAAKwH,SAAS,CACZD,YAAavH,EAAEC,OAAOlC,S,uDAOxB,OAAQ0J,KAAKnG,MAAMiG,YACjB,KAAK,EAQL,KAAK,EACH,OACE,kBAAC,IAAD,CAAUX,MAAOA,GACf,kBAACc,EAAD,CAAMzJ,SAAUwJ,KAAKxJ,WACrB,kBAAC,EAAD,OAGN,QAEE,OACE,6BACE,kBAACyJ,EAAD,CAAMzJ,SAAUwJ,KAAKxJ,WACrB,kBAAC,IAAD,CAAU2I,MAAOA,GACf,kBAACe,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAAC,IAAD,CAAalK,SAAU,CAAEmK,SAAUC,UAASC,WAAYC,uB,GA7DtDC,aAsEHvG,gBA9FA,SAAAC,GAAK,MAAK,CACvBwF,UAAW,CACTtF,OAAQF,EAAMG,QAAQ,GACtBgD,QAASnD,EAAMG,QAAQ,GACvBsF,gBAAiB,aAGnBC,WAAY,CACVC,WAAY,aAEdpC,WAAY,CACV9C,MAAO,MACPC,WAAYV,EAAMG,SAAS,KAE7BqD,WAAY,CACV/C,MAAO,MACPC,WAAYV,EAAMG,SAAS,KAE7BkD,UAAW,CACTC,UAAW,SACX5C,WAAYV,EAAMG,QAAQ,QA0EfJ,CAAmBuF,ICjGdiB,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjI,MAAK,SAAAkI,GACJA,EAAaC,gBAEd/H,OAAM,SAAAkD,GACLhD,QAAQgD,MAAMA,EAAM7D,c","file":"static/js/main.5c09b319.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Container, AppBar, Typography, withStyles, Button, Grid } from \"@material-ui/core\";\r\nimport { Link, animateScroll as scroll } from \"react-scroll\";\r\n\r\n\r\n\r\nexport default props => (\r\n\r\n <>\r\n\r\n  <AppBar\r\n   className=\"header\"\r\n   position=\"static\"\r\n   backgroundColor=\"red\" >\r\n   <Typography\r\n    className=\"headerTitle\"\r\n    variant=\"h3\"\r\n    align=\"left\">\r\n    TEXT  MANAGER\r\n          </Typography>\r\n  </AppBar>\r\n\r\n  <button className=\"BtnStyle center1\" value={1} onClick={props.clickBtn}>\r\n   New Text\r\n    </button>{\" \"}\r\n    <Link\r\n      activeClass=\"active\"\r\n      to=\"view1\"\r\n      spy={true}\r\n      smooth={true}\r\n      offset={-70}\r\n      duration={500}\r\n    >\r\n  <button\r\n   className=\"BtnStyle center2\"\r\n   value={2}\r\n   onClick={props.clickBtn}\r\n  >\r\n   \r\n    View Text\r\n  \r\n  </button>{\" \"}\r\n    </Link>\r\n\r\n </>\r\n);","import axios from \"axios\";\r\n\r\nconst baseURL = 'http://localhost:4000/';\r\n\r\nexport default {\r\n postMessage(url = baseURL + 'postMessages/') {\r\n  return {\r\n   fetchAll: () => axios.get(url),\r\n   fetchById: id => axios.get(url + id),\r\n   create: newRecord => axios.post(url, newRecord),\r\n   update: (id, updatedRecord) => axios.put(url + id, updatedRecord),\r\n   delete: id => axios.delete(url + id)\r\n  }\r\n }\r\n}","import api from \"./api.js\";\r\n\r\nexport const ACTION_TYPES = {\r\n  CREATE: 'CREATE',\r\n  UPDATE: 'UPDATE',\r\n  DELETE: 'DELETE',\r\n  FETCH_ALL: 'FETCH_ALL'\r\n}\r\n\r\nexport const fetchAll = () => dispatch => {\r\n  api.postMessage().fetchAll()\r\n    .then(res => {\r\n      dispatch({\r\n        type: ACTION_TYPES.FETCH_ALL,\r\n        payload: res.data\r\n      })\r\n    })\r\n    .catch(err => console.log(err))\r\n\r\n}\r\n\r\nexport const create = (data, onSuccess) => dispatch => {\r\n  api.postMessage().create(data)\r\n    .then(res => {\r\n      dispatch({\r\n        type: ACTION_TYPES.CREATE,\r\n        payload: res.data\r\n      })\r\n      onSuccess()\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n\r\nexport const update = (id, data, onSuccess) => dispatch => {\r\n  api.postMessage().update(id, data)\r\n    .then(res => {\r\n      dispatch({\r\n        type: ACTION_TYPES.UPDATE,\r\n        payload: res.data\r\n      })\r\n      onSuccess()\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n\r\n\r\nexport const Delete = (id, onSuccess) => dispatch => {\r\n  api.postMessage().delete(id)\r\n    .then(res => {\r\n      dispatch({\r\n        type: ACTION_TYPES.DELETE,\r\n        payload: id\r\n      })\r\n      onSuccess()\r\n    })\r\n    .catch(err => console.log(err))\r\n}","import React, { useEffect, useState } from \"react\";\r\n\r\nconst useForm = (initialFieldValues, setCurrentId) => {\r\n\r\n    const [values, setValues] = useState(initialFieldValues)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const handleInputChange = e => {\r\n        const { name, value } = e.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const resetForm = () => {\r\n        setValues(initialFieldValues)\r\n        setErrors({})\r\n        setCurrentId(0)\r\n    }\r\n\r\n    return {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    };\r\n}\r\n\r\nexport default useForm;","import React, { useEffect, useState } from \"react\";\r\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\r\nimport useForm from \"./useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/postMessage\";\r\nimport ButterToast, { Cinnamon } from \"butter-toast\";\r\nimport { AssignmentTurnedIn } from \"@material-ui/icons\";\r\nimport { browserHistory } from \"react-router\";\r\n\r\nconst initialFieldValues = {\r\n  title: '',\r\n  message: ''\r\n}\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1)\r\n    },\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center'\r\n  },\r\n  postBtn: {\r\n    width: \"15%\",\r\n    marginLeft: theme.spacing(98)\r\n  },\r\n  algntxt: {\r\n    marginLeft: theme.spacing(98)\r\n  }\r\n})\r\n\r\nconst PostMessageForm = ({ classes, ...props }) => {\r\n\r\n  useEffect(() => {\r\n    if (props.currentId != 0) {\r\n      setValues({\r\n        ...props.postMessageList.find(x => x._id == props.currentId)\r\n      })\r\n      setErrors({})\r\n    }\r\n  }, [props.currentId])\r\n\r\n  const validate = () => {\r\n    let temp = { ...errors }\r\n    temp.title = values.title ? \"\" : \"This field is required.\"\r\n    temp.message = values.message ? \"\" : \"This field is required.\"\r\n    setErrors({\r\n      ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  }\r\n\r\n  var {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm\r\n  } = useForm(initialFieldValues, props.setCurrentId)\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    const onSuccess = () => {\r\n      ButterToast.raise({\r\n        content: <Cinnamon.Crisp title=\"Post Box\"\r\n          content=\"Submitted successfully\"\r\n          scheme={Cinnamon.Crisp.SCHEME_PURPLE}\r\n          icon={<AssignmentTurnedIn />}\r\n        />\r\n      })\r\n      resetForm()\r\n    }\r\n    if (validate()) {\r\n      if (props.currentId == 0)\r\n        props.createPostMessage(values, onSuccess)\r\n      else\r\n        props.updatePostMessage(props.currentId, values, onSuccess)\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <form autoComplete=\"off\" noValidate className={`${classes.root} `} onSubmit={handleSubmit}>\r\n      <TextField\r\n        className={classes.algntxt}\r\n        name=\"title\"\r\n        variant=\"outlined\"\r\n        label=\" Text Title\"\r\n        columns={20}\r\n        value={values.title}\r\n        onChange={handleInputChange}\r\n        {...(errors.title && { error: true, helperText: errors.title })}\r\n      />\r\n      <TextField\r\n        className={classes.form}\r\n        name=\"message\"\r\n        variant=\"outlined\"\r\n        label=\"Enter Your Text Here:\"\r\n        fullWidth\r\n        multiline\r\n        rows={8}\r\n        value={values.message}\r\n        onChange={handleInputChange}\r\n        {...(errors.message && { error: true, helperText: errors.message })}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        className={classes.postBtn}\r\n      >Submit</Button>\r\n      <br />\r\n    </form>\r\n  );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  postMessageList: state.postMessage.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n  createPostMessage: actions.create,\r\n  updatePostMessage: actions.update\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessageForm));","import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/postMessage\";\r\nimport { Grid, Paper, withStyles, List, ListItem, ListItemText, Typography, Divider, Button } from \"@material-ui/core\";\r\nimport PostMessageForm from \"./PostMessageForm\";\r\nimport { Link, animateScroll as scroll } from \"react-scroll\";\r\nimport ButterToast, { Cinnamon } from \"butter-toast\";\r\nimport { DeleteSweep } from \"@material-ui/icons\";\r\nimport { tsConstructorType } from \"@babel/types\";\r\n\r\nconst styles = theme => ({\r\n  paper: {\r\n    top: \"100%\",\r\n    margin: theme.spacing(3),\r\n    padding: theme.spacing(8)\r\n  },\r\n  smMargin: {\r\n    margin: theme.spacing(1)\r\n  },\r\n  actionDiv: {\r\n    textAlign: \"center\",\r\n    marginLeft: theme.spacing(93)\r\n  },\r\n  upperBtns1: {\r\n    width: \"40%\",\r\n    marginLeft: theme.spacing(-80)\r\n  },\r\n  upperBtns2: {\r\n    width: \"40%\",\r\n    marginLeft: theme.spacing(-60)\r\n  },\r\n  gridAlign: {\r\n\r\n    marginLeft: theme.spacing(15)\r\n  },\r\n  ntxt: {\r\n\r\n    marginLeft: theme.spacing(1)\r\n  }\r\n})\r\n\r\nconst PostMessages = ({ classes, ...props }) => {\r\n\r\n  const [currentId, setCurrentId] = useState(0)\r\n\r\n  useEffect(() => {\r\n    props.fetchAllPostMessages()\r\n  }, [])\r\n\r\n  const onDelete = id => {\r\n    const onSuccess = () => {\r\n      ButterToast.raise({\r\n        content: <Cinnamon.Crisp title=\"Post Box\"\r\n          content=\"Deleted successfully\"\r\n          scheme={Cinnamon.Crisp.SCHEME_PURPLE}\r\n          icon={<DeleteSweep />}\r\n        />\r\n      })\r\n    }\r\n    if (window.confirm('Are you sure to delete this record?'))\r\n      props.deletePostMessage(id, onSuccess)\r\n  }\r\n\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item xs={10} className={classes.gridAlign}>\r\n        <Paper className={classes.paper}>\r\n          <h1 className={classes.ntxt}>NEW TEXT</h1>\r\n          <PostMessageForm {...{ currentId, setCurrentId }} />\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={10} className={classes.gridAlign}>\r\n        <Paper className={classes.paper}>\r\n          <List>\r\n            <h1 className={classes.ntxt} id=\"view1\">VIEW TEXT</h1>\r\n            {\r\n              props.postMessageList.map((record, index) => {\r\n                return (\r\n                  <Fragment key={index}>\r\n                    <ListItem>\r\n                      <ListItemText>\r\n                        <Typography variant=\"h5\">\r\n                          {record.title}\r\n                        </Typography>\r\n                        <div>\r\n                          {record.message}\r\n                        </div>\r\n                        <div className={classes.actionDiv}>\r\n                          <Button variant=\"text\" color=\"primary\" size=\"small\"\r\n                            className={classes.smMargin}\r\n                            onClick={() => setCurrentId(record._id)}>\r\n                            <h3>\r\n                              Edit\r\n                            </h3>\r\n                          </Button>\r\n                          <Button variant=\"text\" color=\"primary\" size=\"small\"\r\n                            className={classes.smMargin}\r\n                            onClick={() => onDelete(record._id)}>\r\n                            <h3>\r\n                              Delete\r\n                            </h3>\r\n                          </Button>\r\n                        </div>\r\n                      </ListItemText>\r\n                    </ListItem>\r\n                    <Divider component=\"li\" />\r\n                  </Fragment>\r\n                )\r\n              })\r\n            }\r\n          </List>\r\n        </Paper>\r\n      </Grid>\r\n    </Grid >\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  postMessageList: state.postMessage.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n  fetchAllPostMessages: actions.fetchAll,\r\n  deletePostMessage: actions.Delete\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessages));","import { ACTION_TYPES } from \"../actions/postMessage\";\r\n\r\nconst intialState = {\r\n  list: []\r\n}\r\n\r\nexport const postMessage = (state = intialState, action) => {\r\n  switch (action.type) {\r\n    case ACTION_TYPES.FETCH_ALL:\r\n      return {\r\n        ...state,\r\n        list: [...action.payload]\r\n      }\r\n\r\n    case ACTION_TYPES.CREATE:\r\n      return {\r\n        ...state,\r\n        list: [...state.list, action.payload]\r\n      }\r\n\r\n    case ACTION_TYPES.UPDATE:\r\n      return {\r\n        ...state,\r\n        list: state.list.map(x => x._id == action.payload._id ? action.payload : x)\r\n      }\r\n\r\n    case ACTION_TYPES.DELETE:\r\n      return {\r\n        ...state,\r\n        list: state.list.filter(x => x._id != action.payload)\r\n      }\r\n\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from \"redux\";\r\nimport { postMessage } from \"./postMessage\";\r\n\r\nexport const reducers = combineReducers({\r\n postMessage\r\n})","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { reducers } from \"../reducers\";\r\n\r\nexport const store = createStore(\r\n reducers,\r\n compose(\r\n  applyMiddleware(thunk)\r\n )\r\n)","import React, { Component, useState, useEffect } from 'react';\nimport Main from \"./Main\";\nimport View1 from \"./View1\";\nimport './App.css';\nimport './index.css';\nimport { Provider } from \"react-redux\";\nimport PostMessages from \"./components/PostMessages\";\nimport PostMessageForm from \"./components/PostMessageForm\";\nimport { store } from \"./actions/store\";\nimport { Container, AppBar, Typography, withStyles, Button, Grid } from \"@material-ui/core\";\nimport ButterToast, { POS_RIGHT, POS_TOP } from \"butter-toast\";\nimport { render } from 'react-dom';\nimport { connect } from \"react-redux\";\nimport { Link, animateScroll as scroll } from \"react-scroll\";\n\nconst styles = theme => ({\n  someClass: {\n    margin: theme.spacing(2),\n    padding: theme.spacing(2),\n    BackgroundColor: \"AliceBlue\"\n\n  },\n  otherClass: {\n    background: 'AliceBlue'\n  },\n  upperBtns1: {\n    width: \"40%\",\n    marginLeft: theme.spacing(-80)\n  },\n  upperBtns2: {\n    width: \"40%\",\n    marginLeft: theme.spacing(-60)\n  },\n  actionDiv: {\n    textAlign: \"center\",\n    marginLeft: theme.spacing(93)\n  }\n});\n\nclass App extends Component {\n  styles = theme => ({\n    someClass: {\n      margin: theme.spacing(2),\n      padding: theme.spacing(2),\n      BackgroundColor: \"AliceBlue\"\n\n    },\n    otherClass: {\n      background: 'AliceBlue'\n    },\n    upperBtns1: {\n      width: \"40%\",\n      marginLeft: theme.spacing(-80)\n    },\n    upperBtns2: {\n      width: \"40%\",\n      marginLeft: theme.spacing(-60)\n    },\n    actionDiv: {\n      textAlign: \"center\",\n      marginLeft: theme.spacing(93)\n    }\n  });\n\n  state = {\n    renderView: ''\n  };\n\n  clickBtn = e => {\n    this.setState({\n      renderView: +e.target.value\n    });\n  };\n\n  render() {\n\n\n    switch (this.state.renderView) {\n      case 1:\n        return (\n          <Provider store={store}>\n            <Main clickBtn={this.clickBtn} />\n            <PostMessages />\n          </Provider>);\n\n\n      case 2:\n        return (\n          <Provider store={store}>\n            <Main clickBtn={this.clickBtn} />\n            <PostMessages />\n          </Provider>);\n\n      default:\n        //console.log(\"Hi from default\")\n        return (\n          <div>\n            <Main clickBtn={this.clickBtn} />\n            <Provider store={store} >\n              <Container maxWidth=\"lg\">\n                <ButterToast position={{ vertical: POS_TOP, horizontal: POS_RIGHT }} />\n              </Container>\n            </Provider>\n          </div>\n        );\n    }\n\n  }\n}\nexport default withStyles(styles)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}